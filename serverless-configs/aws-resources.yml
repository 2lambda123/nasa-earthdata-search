Resources:
  # SQS Queue to process Color Map entries
  ColorMapsProcessingQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 345600 # Default value, leaving for visibility
      VisibilityTimeout: 300

  TagProcessingQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 300

  LegacyServicesOrderQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - LegacyServicesOrderDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  LegacyServicesOrderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-LegacyServicesOrderDeadLetterQueue
      MessageRetentionPeriod: 1209600

  CatalogRestOrderQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 600 # Give orders a full day to complete
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - CatalogRestOrderDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  CatalogRestOrderDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-CatalogRestOrderDeadLetterQueue
      MessageRetentionPeriod: 1209600

  OptionDefinitionsQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 3600
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - OptionDefinitionDeadLetterQueue
            - Arn
        maxReceiveCount: 2 # Number of times a message will be tried before being dumped to the DLQ

  OrderStatusQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 300

  OptionDefinitionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ${self:custom.siteName}-OptionDefinitionDeadLetterQueue
      MessageRetentionPeriod: 1209600

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for EDSC Lambda functions'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: -1
          FromPort: 0
          ToPort: 65535
      VpcId: ${self:custom.awsResources.vpc}

  # Database password secret storage
  DbPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "EDSC RDS database master password"
      GenerateSecretString:
        SecretStringTemplate: "{\"username\":\"edsc\"}"
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: "\"@/\\"

  SecretRDSInstanceAttachment:
    Type: "AWS::SecretsManager::SecretTargetAttachment"
    Properties:
      SecretId:
        Ref: DbPasswordSecret
      TargetId:
        Ref: Database
      TargetType: AWS::RDS::DBInstance

  # RDS database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: edsc_${self:provider.stage}
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: postgres
      EngineVersion: '10.6'
      MasterUsername: {"Fn::Join": ["", ["{{resolve:secretsmanager:",{"Ref": "DbPasswordSecret"},":SecretString:username}}"] ] }
      MasterUserPassword: {"Fn::Join": ["", ["{{resolve:secretsmanager:",{"Ref": "DbPasswordSecret"},":SecretString:password}}"] ] }
      StorageType: gp2
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Ref: DatabaseVpcSecurityGroup

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: EDSC DB subnet group
      SubnetIds:
        - ${self:custom.awsResources.subnet.a}
        - ${self:custom.awsResources.subnet.b}

  DatabaseVpcSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow Lambdas to access database
      SecurityGroupIngress:
        - SourceSecurityGroupId:
            Ref: LambdaSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
      VpcId: ${self:custom.awsResources.vpc}

  # Merge the NGAP PermissionsBoundary into the
  # default (Serverless Defined) role for executing Lambdas
  # IamRoleLambdaExecution:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     PermissionsBoundary:
  #       Fn::Join: [
  #         "", [
  #           "arn:aws:iam::",
  #           {
  #             "Ref": "AWS::AccountId"
  #           },
  #           ":policy/NGAPShNonProdRoleBoundary"
  #         ]
  #       ]
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action: sts:AssumeRole

  EDSCLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary:
        Fn::Join: [
          "", [
            "arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":policy/NGAPShNonProdRoleBoundary"
          ]
        ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSIAMAuthentication
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource:
                  Fn::Join: [
                    "", [
                        "arn:aws:rds-db:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":dbuser",
                        "/lambda"
                    ]
                  ]
        - PolicyName: EDSCLambdaBase
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: '*'

  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: ApiGatewayRestApi

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: ApiGatewayRestApi

Outputs:
  UpdateOrderStatusWorkflow:
    Description: ARN of the order status step function workflow
    Value:
      Ref: UpdateOrderStatusWorkflowDash${self:provider.stage}
