  #
  # Standalone functions
  #
  migrateDatabase:
    handler: serverless/src/migrateDatabase/handler.default
    timeout: 300
    webpack:
      includeMigrations: true
    warmup:
      enabled: false

  storeUserData:
    timeout: 300
    handler: serverless/src/storeUserData/handler.default
    warmup:
      concurrency: 3

  editableDebugger:
    handler: serverless/src/editableDebugger/handler.default
    warmup:
      enabled: false

  #
  # SQS Lambdas
  #
  processColorMap:
    handler: serverless/src/processColorMap/handler.default
    timeout: 300
    receiveMessageWaitTimeSeconds: 30
    reservedConcurrency: 25
    warmup:
      enabled: false
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ColorMapsProcessingQueue
              - Arn

  processTag:
    handler: serverless/src/processTag/handler.default
    timeout: 300
    receiveMessageWaitTimeSeconds: 30
    reservedConcurrency: 25
    warmup:
      enabled: false
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TagProcessingQueue
              - Arn

  # We need to limit the concurrency on this lambda due to a call to Legacy Services
  # within it. Putting too much load on the endpoint will cause production systems to fail
  fetchOptionDefinitions:
    handler: serverless/src/fetchOptionDefinitions/handler.default
    timeout: 300
    reservedConcurrency: 5
    warmup:
      enabled: false
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - OptionDefinitionsQueue
              - Arn

  submitCatalogRestOrder:
    handler: serverless/src/submitCatalogRestOrder/handler.default
    timeout: 600
    warmup:
      enabled: false
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogRestOrderQueue
              - Arn
    environment:
      updateOrderStatusStateMachineArn: ${self:resources.Outputs.UpdateOrderStatusWorkflow.Value}

  submitLegacyServicesOrder:
    handler: serverless/src/submitLegacyServicesOrder/handler.default
    timeout: 600
    warmup:
      enabled: false
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LegacyServicesOrderQueue
              - Arn
    environment:
      updateOrderStatusStateMachineArn: ${self:resources.Outputs.UpdateOrderStatusWorkflow.Value}

  fetchCatalogRestOrder:
    handler: serverless/src/fetchCatalogRestOrder/handler.default
    warmup:
      enabled: false

  fetchLegacyServicesOrder:
    handler: serverless/src/fetchLegacyServicesOrder/handler.default
    warmup:
      enabled: false

  #
  # Scheduled Lambdas
  #
  generateColorMaps:
    handler: serverless/src/generateColorMaps/handler.default
    description: Gather Color Map data from GIBS and store it in RDS
    timeout: 300
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(0 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg4326'
      - schedule:
          rate: cron(5 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg3857'
      - schedule:
          rate: cron(10 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg3413'
      - schedule:
          rate: cron(15 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg3031'

  generateGibsTags:
    handler: serverless/src/generateGibsTags/handler.default
    description: Tag CMR collections with GIBS product information
    timeout: 300
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(0 * * * ? *)
          enabled: false

  generateSubsettingTags:
    handler: serverless/src/generateSubsettingTags/handler.default
    description: Tag CMR collections with umm service subsetting information
    timeout: 300
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(0 5 * * ? *)
          enabled: false

  generateCollectionCapabilityTags:
    handler: serverless/src/generateCollectionCapabilityTags/handler.default
    description: Iterate over all CMR collections adding tags specific to EDSC
    timeout: 300
    warmup:
      enabled: false
    events:
      - schedule:
          rate: cron(0 6 * * ? *)
          enabled: false
          input:
            pageNumber: 1
            perPage: 2000

  #
  # API Gateway Endpoints
  #
  getColorMap:
    handler: serverless/src/getColorMap/handler.default
    warmup:
      enabled: false
    events:
      - http:
          method: get
          cors: true
          path: colormaps/{product}

  cwicGranuleSearch:
    handler: serverless/src/cwicGranuleSearch/handler.default
    warmer:
      concurrency: 3
    events:
      - http:
          method: post
          cors: true
          path: cwic/granules

  conceptMetadata:
    handler: serverless/src/conceptMetadata/handler.default
    events:
      - http:
          method: get
          cors: true
          path: concepts/metadata

  saveShapefile:
    handler: serverless/src/saveShapefile/handler.default
    events:
      - http:
          method: post
          cors: true
          path: shapefiles

  edlLogin:
    handler: serverless/src/edlLogin/handler.default
    warmup:
      concurrency: 3
    events:
      - http:
          method: get
          cors: true
          path: login

  edlCallback:
    handler: serverless/src/edlCallback/handler.default
    warmup:
      concurrency: 3
    events:
      - http:
          method: get
          cors: true
          path: urs_callback

  edlAuthorizer:
    handler: serverless/src/edlAuthorizer/handler.default
    warmer:
      concurrency: 3
    cors: true

  #
  # EDL Authenticated API Gateway Endpoints
  #

  retrieveConcept:
    handler: serverless/src/retrieveConcept/handler.default
    events:
      - http:
          method: get
          cors: true
          path: concepts/{id}
          authorizer: edlAuthorizer
          request:
            parameters:
              paths:
                id: true

  collectionSearch:
    handler: serverless/src/collectionSearch/handler.default
    events:
      - http:
          method: post
          cors: true
          path: collections/{format}
          request:
            parameters:
              paths:
                format: true
          authorizer: edlAuthorizer

  cmrGranuleSearch:
    handler: serverless/src/cmrGranuleSearch/handler.default
    events:
      - http:
          method: post
          cors: true
          path: granules
          authorizer: edlAuthorizer

  timelineSearch:
    handler: serverless/src/timelineSearch/handler.default
    events:
      - http:
          method: post
          cors: true
          path: granules/timeline
          authorizer: edlAuthorizer

  submitRetrieval:
    handler: serverless/src/submitRetrieval/handler.default
    events:
      - http:
          method: post
          cors: true
          path: retrievals
          authorizer: edlAuthorizer

  getRetrieval:
    handler: serverless/src/getRetrieval/handler.default
    events:
      - http:
          method: get
          cors: true
          path: retrievals/{retrieval_id}
          authorizer: edlAuthorizer

  getRetrievalCollection:
    handler: serverless/src/getRetrievalCollection/handler.default
    events:
      - http:
          method: get
          cors: true
          path: retrieval_collections/{id}
          authorizer: edlAuthorizer

  getAccessMethods:
    handler: serverless/src/getAccessMethods/handler.default
    events:
      - http:
          method: post
          cors: true
          path: access_methods
          authorizer: edlAuthorizer

  ousGranuleSearch:
    handler: serverless/src/ousGranuleSearch/handler.default
    events:
      - http:
          method: post
          cors: true
          path: granules/ous
          authorizer: edlAuthorizer
