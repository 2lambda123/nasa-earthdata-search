service: earthdata-search

provider:
  name: aws
  runtime: nodejs8.10
  versionFunctions: false
  stage: ${opt:stage, 'lab'}
  environment:
    dbEndpoint:
      Fn::GetAtt:
        - Database
        - Endpoint.Address
    dbPort:
      Fn::GetAtt:
        - Database
        - Endpoint.Port
    dbUsername: edsc
    dbName: edsc
    colorMapQueueUrl:
        Ref: ColorMapsProcessingQueue
  vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
      subnetIds:
        - ${self:custom.awsResources.subnet.a}
        - ${self:custom.awsResources.subnet.b}
  role: ScheduledLambdaRole

plugins:
  - serverless-dotenv-plugin
  - serverless-finch
  - serverless-offline
  - serverless-webpack

#
# Lambda Functions
#
functions:
  migrateDatabase:
    handler: serverless/src/migrateDatabase.default
    timeout: 300
    webpack:
      includeMigrations: true

  #
  # SQS Lambdas
  #
  processColorMap:
    handler: serverless/src/processColorMap.default
    timeout: 300
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ColorMapsProcessingQueue
              - Arn

  #
  # Scheduled Lambdas
  #
  generateColorMaps:
    handler: serverless/src/generateColorMaps.default
    timeout: 300
    events:
      - schedule:
          rate: cron(0 5 * * ? *)
          enabled: true
          input:
            projection: 'epsg4326'
      - schedule:
          rate: cron(5 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg3857'
      - schedule:
          rate: cron(10 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg3413'
      - schedule:
          rate: cron(15 5 * * ? *)
          enabled: false
          input:
            projection: 'epsg3031'

  #
  # API Gateway Endpoints
  #
  getColorMap:
    handler: serverless/src/getColorMap.default
    events:
      - http:
          method: get
          cors:
            origin: '*'
          path: colormaps/{product}

  cwicGranuleSearch:
    handler: serverless/src/cwicGranuleSearch.default
    events:
      - http:
          method: post
          cors:
            origin: '*'
          path: cwic/granules

  nlpSearch:
    handler: serverless/src/nlpSearch.default
    memorySize: 128
    events:
      - http:
          method: post
          cors:
            origin : '*'
          path: nlp

  #
  # EDL Authenticated API Gateway Endpoints
  #

  # retrieveConcept:
  #   handler: serverless/src/cmr.retrieveConcept
  #   events:
  #     - http:
  #         method: post
  #         cors:
  #           origin: '*'
  #         path: concepts/{id}
  #         request:
  #           parameters:
  #             paths:
  #               id: true

  collectionSearch:
    handler: serverless/src/collectionSearch.default
    events:
      - http:
          method: post
          cors:
            origin: '*'
          path: collections

  granuleSearch:
    handler: serverless/src/cmrGranuleSearch.default
    events:
      - http:
          method: post
          cors:
            origin: '*'
          path: granules

  timelineSearch:
    handler: serverless/src/timelineSearch.default
    events:
      - http:
          method: post
          cors:
            origin: '*'
          path: granules/timeline

  ursCallback:
    handler: serverless/src/earthdataLogin.default
    events:
      - http:
          method: get
          cors:
            origin: '*'
          path: urs_callback
      - http:
          method: get
          cors:
            origin: '*'
          path: logout

#
# Additional AWS Resources
#
resources:
  Resources:
    # StaticSite:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     AccessControl: PublicRead
    #     BucketName: ${self:custom.siteName}
    #     WebsiteConfiguration:
    #       IndexDocument: index.html

    # StaticSiteS3BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket:
    #       Ref: StaticSite
    #     PolicyDocument:
    #       Statement:
    #         - Sid: PublicReadGetObject

    #           Effect: Allow
    #           Principal: "*"
    #           Action:
    #             - s3:GetObject
    #           Resource:
    #             Fn::Join: [
    #               "", [
    #                 "arn:aws:s3:::",
    #                 {
    #                   "Ref": "StaticSite"
    #                 },
    #                 "/*"
    #               ]
    #             ]

    # SQS Queue to process Color Map entries
    ColorMapsProcessingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        MessageRetentionPeriod: 345600 # Default value, leaving for visibility
        VisibilityTimeout: 300

    LambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Security Group for EDSC Lambda functions'
        SecurityGroupEgress:
          - CidrIp: '0.0.0.0/0'
            IpProtocol: -1
            FromPort: 0
            ToPort: 65535
        VpcId: ${self:custom.awsResources.vpc}

    # Database password secret storage
    DbPasswordSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: "EDSC RDS database master password"
        GenerateSecretString:
          SecretStringTemplate: "{\"username\":\"edsc\"}"
          GenerateStringKey: "password"
          PasswordLength: 30
          ExcludeCharacters: "\"@/\\"

    SecretRDSInstanceAttachment:
      Type: "AWS::SecretsManager::SecretTargetAttachment"
      Properties:
        SecretId:
          Ref: DbPasswordSecret
        TargetId:
          Ref: Database
        TargetType: AWS::RDS::DBInstance

    # RDS database
    Database:
      Type: AWS::RDS::DBInstance
      Properties:
        AllocatedStorage: '20'
        DBInstanceClass: db.t2.micro
        Engine: postgres
        EngineVersion: '10.6'
        MasterUsername: {"Fn::Join": ["", ["{{resolve:secretsmanager:",{"Ref": "DbPasswordSecret"},":SecretString:username}}"] ] }
        MasterUserPassword: {"Fn::Join": ["", ["{{resolve:secretsmanager:",{"Ref": "DbPasswordSecret"},":SecretString:password}}"] ] }
        StorageType: gp2
        DBSubnetGroupName:
          Ref: DBSubnetGroup
        VPCSecurityGroups:
          - Ref: DatabaseVpcSecurityGroup

    DBSubnetGroup:
      Type: 'AWS::RDS::DBSubnetGroup'
      Properties:
        DBSubnetGroupDescription: EDSC DB subnet group
        SubnetIds:
          - ${self:custom.awsResources.subnet.a}
          - ${self:custom.awsResources.subnet.b}

    DatabaseVpcSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Allow Lambdas to access database
        SecurityGroupIngress:
          - SourceSecurityGroupId:
              Ref: LambdaSecurityGroup
            IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
        VpcId: ${self:custom.awsResources.vpc}

    # Merge the NGAP PermissionsBoundary into the
    # default (Serverless Defined) role for executing Lambdas
    IamRoleLambdaExecution:
      Type: "AWS::IAM::Role"
      Properties:
        PermissionsBoundary:
          Fn::Join: [
            "", [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":policy/NGAPShRoleBoundary"
            ]
          ]

    ScheduledLambdaRole:
      Type: "AWS::IAM::Role"
      Properties:
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        PermissionsBoundary:
          Fn::Join: [
            "", [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":policy/NGAPShRoleBoundary"
            ]
          ]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: RDSIAMAuthentication
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - rds-db:connect
                  Resource:
                    Fn::Join: [
                      "", [
                          "arn:aws:rds-db:",
                          {
                            "Ref": "AWS::Region"
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":dbuser",
                          "/lambda"
                      ]
                    ]
          - PolicyName: EDSCLambdaBase
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource:
                    Ref: DbPasswordSecret

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

# Package each lambda into individual zip files. This reduces the size of
# each lambda of but increases the complexity of the compilation step slightly
package:
  individually: true

custom:
  siteName: earthdata-search-lab

  awsResources:
    vpc: 'vpc-0ae48cd75a6141657'
    subnet:
      a: 'subnet-086c53aec52be1e70'
      b: 'subnet-09d8f21a539138693'


  # Finch (S3 sync plugin)
  client:
    bucketName: ${self:custom.siteName}
    distributionFolder: static/dist

  # Default is 3000 so to avoid conflicts with rails applications we'll define a new port
  serverless-offline:
    port: 3001

  # Serverless Webpack configurations
  webpack:
    webpackConfig: 'serverless.webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles: src/**/*.test.js
